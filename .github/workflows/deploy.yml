name: Deploy
run-name: Deploy of ${{ github.ref_name }} to ${{github.event.inputs.domain}} with API ${{github.event.inputs.api}}

on:
  workflow_dispatch:
    inputs:
      domain:
        type: choice
        description: Target
        required: true
        options:
          - PROD #demo-sdk.lombard.finance
      api:
        type: choice
        description: API
        required: true
        options:
          - PROD

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: '20.10.0'
          cache: 'yarn'

      - name: Prevent wrong version releasing
        if: ${{ github.event.inputs.domain == 'PROD' && github.ref != 'refs/heads/main' }}
        run: |
          echo "Production deployment is possible only from the main branch"
          exit 1

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build production
        working-directory: .
        env:
          NODE_OPTIONS: '--max-old-space-size=8192'
          VITE_RECAPTCHA_SITE_KEY_STAGE: ${{ secrets.VITE_RECAPTCHA_SITE_KEY_STAGE }}

        if: ${{ github.event.inputs.api == 'PROD' }}
        run: |
          yarn build

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Copy files to the production website with the AWS CLI
        working-directory: .
        env:
          DOMAIN: ${{ vars[format('{0}{1}', github.event.inputs.domain, '_DOMAIN')] }}
          DISTRIBUTION_ID: ${{ vars[format('{0}{1}', github.event.inputs.domain, '_DISTRIBUTION_ID')] }}
        run: |
          aws s3 sync --delete ./build s3://$DOMAIN/ --acl public-read --cache-control "public,max-age=600,s-maxage=3600"
          aws configure set preview.cloudfront true
          echo "Invalidating CDN network"
          INVALIDATION_ID=`aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*' | jq -r '.Invalidation.Id'`
          echo "Invalidation ID is $INVALIDATION_ID"
          echo "CDN Invalidation request is sent."
